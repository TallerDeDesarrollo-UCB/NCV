// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NinosConValorAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NinosConValorAPI.Migrations
{
    [DbContext(typeof(NCV_DBContext))]
    [Migration("20230501223106_Prueba")]
    partial class Prueba
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssetCategory", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetResponsibleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssetResponsible", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetStateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssetState", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.BiometricsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Biometrics", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.EducationReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<string>("Rude")
                        .HasColumnType("text");

                    b.Property<string>("School")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("EducationReports", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.FamilyReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("HasExtendedFamily")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasOriginFamily")
                        .HasColumnType("boolean");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<int?>("SiblingsInFoundation")
                        .HasColumnType("integer");

                    b.Property<int?>("SiblingsOutside")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("FamilyReports", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.FixedAssetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetResponsibleId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssetStateId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<int?>("ProgramHouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetResponsibleId");

                    b.HasIndex("AssetStateId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("ProgramHouseId");

                    b.ToTable("FixedAsset", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.FoundationReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdmissionReason")
                        .HasColumnType("text");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("FoundationReport", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.HealthReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodType")
                        .HasColumnType("text");

                    b.Property<string>("CIDiscapacidad")
                        .HasColumnType("text");

                    b.Property<string>("HealthProblems")
                        .HasColumnType("text");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<string>("NeurologicalDiagnosis")
                        .HasColumnType("text");

                    b.Property<string>("PsychologicalDiagnosis")
                        .HasColumnType("text");

                    b.Property<string>("SpecialDiagnosis")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("HealthReports", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.KidEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("CI")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramHouseId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProgramHouseId");

                    b.ToTable("Kid", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.LegalReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CourtNumber")
                        .HasColumnType("text");

                    b.Property<string>("Dna")
                        .HasColumnType("text");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<string>("LegalProcesses")
                        .HasColumnType("text");

                    b.Property<string>("Nurej")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("LegalReports", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.ProgramHouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ResponsibleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("ProgramHouse", (string)null);
                });

            modelBuilder.Entity("NinosConValorAPI.Models.Security.IdentityAppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NinosConValorAPI.Models.Security.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NinosConValorAPI.Models.Security.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NinosConValorAPI.Models.Security.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NinosConValorAPI.Models.Security.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetTypeEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.AssetCategoryEntity", "AssetCategory")
                        .WithMany("AssetTypes")
                        .HasForeignKey("AssetCategoryId");

                    b.Navigation("AssetCategory");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.BiometricsEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithMany("Biometrics")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.ContactEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithMany("Contacts")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.EducationReportEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.FamilyReportEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithOne("FamilyReport")
                        .HasForeignKey("NinosConValorAPI.Data.Entity.FamilyReportEntity", "KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.FixedAssetEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.AssetResponsibleEntity", "AssetResponsible")
                        .WithMany("FixedAssets")
                        .HasForeignKey("AssetResponsibleId");

                    b.HasOne("NinosConValorAPI.Data.Entity.AssetStateEntity", "AssetState")
                        .WithMany("FixedAssets")
                        .HasForeignKey("AssetStateId");

                    b.HasOne("NinosConValorAPI.Data.Entity.AssetTypeEntity", "AssetType")
                        .WithMany("FixedAssets")
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("NinosConValorAPI.Data.Entity.ProgramHouseEntity", "ProgramHouse")
                        .WithMany("FixedAssets")
                        .HasForeignKey("ProgramHouseId");

                    b.Navigation("AssetResponsible");

                    b.Navigation("AssetState");

                    b.Navigation("AssetType");

                    b.Navigation("ProgramHouse");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.FoundationReportEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithOne("FoundationReport")
                        .HasForeignKey("NinosConValorAPI.Data.Entity.FoundationReportEntity", "KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.HealthReportEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithOne("HealthReport")
                        .HasForeignKey("NinosConValorAPI.Data.Entity.HealthReportEntity", "KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.KidEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.ProgramHouseEntity", "ProgramHouse")
                        .WithMany("Kids")
                        .HasForeignKey("ProgramHouseId");

                    b.Navigation("ProgramHouse");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.LegalReportEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Data.Entity.KidEntity", "Kid")
                        .WithOne("LegalReport")
                        .HasForeignKey("NinosConValorAPI.Data.Entity.LegalReportEntity", "KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.ProgramHouseEntity", b =>
                {
                    b.HasOne("NinosConValorAPI.Models.Security.IdentityAppUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetCategoryEntity", b =>
                {
                    b.Navigation("AssetTypes");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetResponsibleEntity", b =>
                {
                    b.Navigation("FixedAssets");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetStateEntity", b =>
                {
                    b.Navigation("FixedAssets");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.AssetTypeEntity", b =>
                {
                    b.Navigation("FixedAssets");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.KidEntity", b =>
                {
                    b.Navigation("Biometrics");

                    b.Navigation("Contacts");

                    b.Navigation("FamilyReport");

                    b.Navigation("FoundationReport");

                    b.Navigation("HealthReport");

                    b.Navigation("LegalReport");
                });

            modelBuilder.Entity("NinosConValorAPI.Data.Entity.ProgramHouseEntity", b =>
                {
                    b.Navigation("FixedAssets");

                    b.Navigation("Kids");
                });
#pragma warning restore 612, 618
        }
    }
}
